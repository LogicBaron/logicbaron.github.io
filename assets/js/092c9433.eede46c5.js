"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[1118],{7141:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"community/contribute","title":"Contributing","description":"logicbaron is seeking collaborators who can assist with adding documents related to machine learning and mathematics, as well as coding and translation.","source":"@site/docs/community/contribute.mdx","sourceDirName":"community","slug":"/community/contribute","permalink":"/docs/community/contribute","draft":false,"unlisted":false,"editUrl":"https://github.com/logicbaron/logicbaron.github.io/tree/dev/docs/community/contribute.mdx","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"id":"contribute","sidebar_position":10},"sidebar":"CommunitySidebar","previous":{"title":"Hello","permalink":"/docs/community/hello"}}');var i=t(4848),s=t(8453);const r={id:"contribute",sidebar_position:10},c="Contributing",a={},d=[{value:"Commit Message",id:"commit-message",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"contributing",children:"Contributing"})}),"\n",(0,i.jsx)(n.p,{children:"logicbaron is seeking collaborators who can assist with adding documents related to machine learning and mathematics, as well as coding and translation."}),"\n",(0,i.jsxs)(n.p,{children:["logicbaron is built based on ",(0,i.jsx)(n.a,{href:"https://docusaurus.io/",children:"Docusaurus"})]}),"\n",(0,i.jsx)(n.h2,{id:"commit-message",children:"Commit Message"}),"\n",(0,i.jsx)(n.p,{children:"See how a minor change to your commit message style can make you a better programmer."}),"\n",(0,i.jsxs)(n.p,{children:["Format: ",(0,i.jsx)(n.code,{children:"<type>(<scope>): <subject>"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"<scope>"})," is optional. If your change is specific to one/two packages, consider adding the scope. Scopes should be brief but recognizable, e.g. ",(0,i.jsx)(n.code,{children:"content-docs"}),", ",(0,i.jsx)(n.code,{children:"theme-classic"}),", ",(0,i.jsx)(n.code,{children:"core"})]}),"\n",(0,i.jsx)(n.p,{children:"The various types of commits:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"feat"}),": a new API or behavior for the end user.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fix"}),": a bug fix for the end user.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"docs"}),": a change to the website or other Markdown documents in our repo.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"refactor"}),": a change to production code that leads to no behavior difference, e.g. splitting files, renaming internal variables, improving code style...",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"test"}),": adding missing tests, refactoring tests; no production code change.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"chore"}),": upgrading dependencies, releasing new versions... Chores that are regularly done for maintenance purposes.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"misc"}),": anything else that doesn't change production code, yet is not test or chore. e.g. updating GitHub actions workflow."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Do not get too stressed about PR titles, however. Your PR will be squash-merged and your commit to the main branch will get the title of your PR, so commits within a branch don't need to be semantically named. The maintainers will help you get the PR title right, and we also have a PR label system that doesn't equate with the commit message types. Your code is more important than conventions!"}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"feat(core): allow overriding of webpack config\n^--^^----^  ^------------^\n|   |       |\n|   |       +-> Summary in present tense. Use lower case not title case!\n|   |\n|   +-> The package(s) that this change affected.\n|\n+-------\x3e Type: see above for the list we use.\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var o=t(6540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);